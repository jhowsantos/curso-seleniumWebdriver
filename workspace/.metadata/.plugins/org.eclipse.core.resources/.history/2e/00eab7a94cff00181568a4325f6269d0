package test;

import java.text.DecimalFormat;

import org.junit.Assert;
import org.junit.Test;

import main.Funcionario;
import main.Gerente;

public class DarPromocaoTest {

	@Test
	public void testGerenteAutorizadoParaDarPromocao() {

		// Criando um gerente com permissão para dar promoção
		Gerente gerente1 = new Gerente("José", true);
		// Criando um gerente sem permissão para dar promoção
		Gerente gerente2 = new Gerente("Silva", false);

		// Verifica se gerente1 pode dar promoção
		Assert.assertTrue(gerente1.isPodeDarPromocao());

		// Verifica se gerente2 não pode dar promoção
		Assert.assertFalse(gerente2.isPodeDarPromocao());
	}

	@Test
	public void testDarPromocaoEstagiario() {

		// Criando um funcionario estágiario
		Funcionario estagiario = new Funcionario("Junior", "estagiario", 1.000, 6);

		if (estagiario.getCargo().equals("estagiario") && estagiario.getTempoDeEmpresa() >= 6) {

			// salario recebe bonificação de 500.00 por merito
			double salario = estagiario.getSalario() + 500;
			
			estagiario.setSalario(salario);
			
			//DecimalFormat formato = new DecimalFormat("#.###");
			//salario = Double.valueOf(formato.format(salario));

			Assert.assertEquals("1.500", estagiario.getSalario());
		}
	}

	@Test
	public void testDarPromocaoAnalistaJr() {

		// Criando um funcionario analista Junior
		Funcionario analistaJunior = new Funcionario("Lucas", "analistaJr", 2.000, 1);
	}

	@Test
	public void testDarPromocaoAnalistaSr() {

		// Criando um funcionario analista Senior
		Funcionario analistaSenior = new Funcionario("Junior", "analistaSr", 5.000, 10);
	}

	@Test
	public void testDarPromocaoDiretor() {
		// Criando um funcionario Diretor
		Funcionario diretor = new Funcionario("Stark", "diretor", 35.000, 20);
	}

}
